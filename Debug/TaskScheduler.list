
TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f88  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800111c  0800111c  0001111c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001234  08001234  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08001234  08001234  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001234  08001234  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001234  08001234  00011234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001238  08001238  00011238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800123c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000078  080012b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080012b4  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ba2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c0  00000000  00000000  00020c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00021010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000168  00000000  00000000  000211b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c59  00000000  00000000  00021318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000153c  00000000  00000000  00023f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000096bf  00000000  00000000  000254ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002eb6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c18  00000000  00000000  0002ebbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001104 	.word	0x08001104

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	08001104 	.word	0x08001104

080001d4 <main>:
uint8_t current_task =1;
uint32_t task_handlers[MAX_TASKS];

uint32_t psp_of_tasks[MAX_TASKS]={T1_STACK_START,T2_STACK_START,T3_STACK_START,T4_STACK_START};
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80001d8:	f000 f90c 	bl	80003f4 <enable_processor_faults>
	init_schedular_stack(SCHED_STACK_START);
 80001dc:	480c      	ldr	r0, [pc, #48]	; (8000210 <main+0x3c>)
 80001de:	f000 f879 	bl	80002d4 <init_schedular_stack>

	 task_handlers[0]= (uint32_t)task1_handler;
 80001e2:	4a0c      	ldr	r2, [pc, #48]	; (8000214 <main+0x40>)
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <main+0x44>)
 80001e6:	601a      	str	r2, [r3, #0]
	 task_handlers[1]= (uint32_t)task2_handler;
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <main+0x48>)
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <main+0x44>)
 80001ec:	605a      	str	r2, [r3, #4]
	 task_handlers[2]= (uint32_t)task3_handler;
 80001ee:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <main+0x4c>)
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <main+0x44>)
 80001f2:	609a      	str	r2, [r3, #8]
	 task_handlers[3]=(uint32_t)task4_handler;
 80001f4:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <main+0x50>)
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <main+0x44>)
 80001f8:	60da      	str	r2, [r3, #12]

	 init_task_stack();
 80001fa:	f000 f871 	bl	80002e0 <init_task_stack>
	 switch_sp_to_psp();
 80001fe:	f000 f8eb 	bl	80003d8 <switch_sp_to_psp>
	 init_systick_timer(TICK_HZ);
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f000 f82f 	bl	8000268 <init_systick_timer>



	task1_handler();
 800020a:	f000 f80d 	bl	8000228 <task1_handler>
    /* Loop forever */
	for(;;);
 800020e:	e7fe      	b.n	800020e <main+0x3a>
 8000210:	20017000 	.word	0x20017000
 8000214:	08000229 	.word	0x08000229
 8000218:	20000094 	.word	0x20000094
 800021c:	08000239 	.word	0x08000239
 8000220:	08000249 	.word	0x08000249
 8000224:	08000259 	.word	0x08000259

08000228 <task1_handler>:
}

void task1_handler(){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task1_handler \n");
 800022c:	4801      	ldr	r0, [pc, #4]	; (8000234 <task1_handler+0xc>)
 800022e:	f000 fad9 	bl	80007e4 <puts>
 8000232:	e7fb      	b.n	800022c <task1_handler+0x4>
 8000234:	0800111c 	.word	0x0800111c

08000238 <task2_handler>:
	}
}
void task2_handler(){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task2_handler \n");
 800023c:	4801      	ldr	r0, [pc, #4]	; (8000244 <task2_handler+0xc>)
 800023e:	f000 fad1 	bl	80007e4 <puts>
 8000242:	e7fb      	b.n	800023c <task2_handler+0x4>
 8000244:	08001134 	.word	0x08001134

08000248 <task3_handler>:
	}
}
void task3_handler(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	while(1){
		 printf("This  is task3_handler \n");
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <task3_handler+0xc>)
 800024e:	f000 fac9 	bl	80007e4 <puts>
 8000252:	e7fb      	b.n	800024c <task3_handler+0x4>
 8000254:	0800114c 	.word	0x0800114c

08000258 <task4_handler>:
	}
}
void task4_handler(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	while(1){
	 printf("This is task4_handler \n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <task4_handler+0xc>)
 800025e:	f000 fac1 	bl	80007e4 <puts>
 8000262:	e7fb      	b.n	800025c <task4_handler+0x4>
 8000264:	08001164 	.word	0x08001164

08000268 <init_systick_timer>:
	}
}
void init_systick_timer(uint32_t tick_hz)
{
 8000268:	b480      	push	{r7}
 800026a:	b087      	sub	sp, #28
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <init_systick_timer+0x60>)
 8000272:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <init_systick_timer+0x64>)
 8000276:	613b      	str	r3, [r7, #16]

    uint32_t count_value= (SYSTICK_TIM_CLK/tick_hz)-1;
 8000278:	4a15      	ldr	r2, [pc, #84]	; (80002d0 <init_systick_timer+0x68>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000280:	3b01      	subs	r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
    //Clear the value of SVR
    *pSRVR = 0x00FFFFFFFF;
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	f04f 32ff 	mov.w	r2, #4294967295
 800028a:	601a      	str	r2, [r3, #0]
    //load the value in to SVR
    *pSRVR |= count_value;
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	431a      	orrs	r2, r3
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	601a      	str	r2, [r3, #0]
    //do some settings
    *pSCSR |= (1<<1);//Enables Systick Exception request
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f043 0202 	orr.w	r2, r3, #2
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	601a      	str	r2, [r3, #0]
    *pSCSR |= (1<<2);//Indicates the clock source,processor clock source
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f043 0204 	orr.w	r2, r3, #4
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	601a      	str	r2, [r3, #0]
    //enable the systick
    *pSCSR |= (1<<0); //enable the counter
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f043 0201 	orr.w	r2, r3, #1
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	601a      	str	r2, [r3, #0]
}
 80002bc:	bf00      	nop
 80002be:	371c      	adds	r7, #28
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	e000e014 	.word	0xe000e014
 80002cc:	e000e010 	.word	0xe000e010
 80002d0:	00f42400 	.word	0x00f42400

080002d4 <init_schedular_stack>:
__attribute__((naked)) void init_schedular_stack(uint32_t sched_top_of_stack)
{
 80002d4:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP,%0"::"r"(sched_top_of_stack):);
 80002d6:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002da:	4770      	bx	lr
}
 80002dc:	bf00      	nop
	...

080002e0 <init_task_stack>:

void init_task_stack()
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i = 0; i <MAX_TASKS;i++){
 80002e6:	2300      	movs	r3, #0
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	e032      	b.n	8000352 <init_task_stack+0x72>
		pPSP = (uint32_t*) psp_of_tasks[i];
 80002ec:	4a1e      	ldr	r2, [pc, #120]	; (8000368 <init_task_stack+0x88>)
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f4:	60fb      	str	r3, [r7, #12]
		pPSP--;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	3b04      	subs	r3, #4
 80002fa:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000302:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3b04      	subs	r3, #4
 8000308:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)task_handlers[i];
 800030a:	4a18      	ldr	r2, [pc, #96]	; (800036c <init_task_stack+0x8c>)
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	601a      	str	r2, [r3, #0]

		pPSP--;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3b04      	subs	r3, #4
 800031a:	60fb      	str	r3, [r7, #12]
		*pPSP=0xFFFFFFFD;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f06f 0202 	mvn.w	r2, #2
 8000322:	601a      	str	r2, [r3, #0]
		for(int j = 0; j<13; j++){
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e008      	b.n	800033c <init_task_stack+0x5c>
		pPSP--;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	3b04      	subs	r3, #4
 800032e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
		for(int j = 0; j<13; j++){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3301      	adds	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b0c      	cmp	r3, #12
 8000340:	ddf3      	ble.n	800032a <init_task_stack+0x4a>
		}
		psp_of_tasks[i] = (uint32_t)pPSP;
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4908      	ldr	r1, [pc, #32]	; (8000368 <init_task_stack+0x88>)
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i <MAX_TASKS;i++){
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	3301      	adds	r3, #1
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	2b03      	cmp	r3, #3
 8000356:	ddc9      	ble.n	80002ec <init_task_stack+0xc>

	}
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000004 	.word	0x20000004
 800036c:	20000094 	.word	0x20000094

08000370 <get_psp_value>:

void get_psp_value(void){
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 8000374:	bf00      	nop
}
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
	...

08000380 <save_psp_value>:
void save_psp_value(uint32_t current_psp_value)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task]= current_psp_value;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <save_psp_value+0x24>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4619      	mov	r1, r3
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <save_psp_value+0x28>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000004 	.word	0x20000004

080003ac <update_next_task>:
void update_next_task(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	current_task++;
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <update_next_task+0x28>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <update_next_task+0x28>)
 80003ba:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <update_next_task+0x28>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	f003 0303 	and.w	r3, r3, #3
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <update_next_task+0x28>)
 80003c8:	701a      	strb	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	20000000 	.word	0x20000000

080003d8 <switch_sp_to_psp>:

__attribute__ (( naked )) void switch_sp_to_psp(void){
	//1.Initialize the PSP with TASK1 stack_start
	   //get the value of psp of current task
	__asm volatile("PUSH {LR}");
 80003d8:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80003da:	f7ff ffc9 	bl	8000370 <get_psp_value>
	__asm volatile ("MSR PSP,R0");
 80003de:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80003e2:	f85d eb04 	ldr.w	lr, [sp], #4
	//2.Change SP to PSP using CONTROL register
	__asm volatile("MOV R0,#0x02");
 80003e6:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 80003ea:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80003ee:	4770      	bx	lr
}
 80003f0:	bf00      	nop
	...

080003f4 <enable_processor_faults>:
void enable_processor_faults(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
	uint32_t*pSHCSR = (uint32_t*)0XE000ED24;
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <enable_processor_faults+0x3c>)
 80003fc:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1<<16); //mem_manage
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<17);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<18);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]

}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed24 	.word	0xe000ed24

08000434 <SysTick_Handler>:

 void SysTick_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0


		/*Save the context of current task */

		//1. Get current running task's PSP value
		__asm volatile("MRS R0,PSP");
 8000438:	f3ef 8009 	mrs	r0, PSP
		//2. Using that PSP value store SF2( R4 to R11)
		__asm volatile("STMDB R0!,{R4-R11}");
 800043c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		__asm volatile("PUSH {LR}");
 8000440:	b500      	push	{lr}

		//3. Save the current value of PSP
	    __asm volatile("BL save_psp_value");
 8000442:	f7ff ff9d 	bl	8000380 <save_psp_value>


		/*Retrieve the context of next task */

		//1. Decide next task to run
	    __asm volatile("BL update_next_task");
 8000446:	f7ff ffb1 	bl	80003ac <update_next_task>

		//2. get its past PSP value
		__asm volatile ("BL get_psp_value");
 800044a:	f7ff ff91 	bl	8000370 <get_psp_value>

		//3. Using that PSP value retrieve SF2(R4 to R11)
		__asm volatile ("LDMIA R0!,{R4-R11}");
 800044e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		//4. update PSP and exit
		__asm volatile("MSR PSP,R0");
 8000452:	f380 8809 	msr	PSP, r0

		__asm volatile("POP {LR}");
 8000456:	f85d eb04 	ldr.w	lr, [sp], #4

		__asm volatile("BX LR");
 800045a:	4770      	bx	lr
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
	...

08000468 <HardFault_Handler>:


void HardFault_Handler(){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	printf(" HardFault_Handler \n");
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <HardFault_Handler+0x10>)
 800046e:	f000 f9b9 	bl	80007e4 <puts>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	0800117c 	.word	0x0800117c

0800047c <MemManage_Handler>:
void MemManage_Handler(){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	printf(" MemManage_Handler \n");
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <MemManage_Handler+0x10>)
 8000482:	f000 f9af 	bl	80007e4 <puts>
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	08001190 	.word	0x08001190

08000490 <BusFault_Handler>:
void BusFault_Handler(){
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	printf("  BusFault_Handler \n");
 8000494:	4802      	ldr	r0, [pc, #8]	; (80004a0 <BusFault_Handler+0x10>)
 8000496:	f000 f9a5 	bl	80007e4 <puts>
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	080011a4 	.word	0x080011a4

080004a4 <UsageFault_Handler>:
void UsageFault_Handler(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	printf("  UsageFault_Handler \n");
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <UsageFault_Handler+0x10>)
 80004aa:	f000 f99b 	bl	80007e4 <puts>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	080011b8 	.word	0x080011b8

080004b8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <ITM_SendChar+0x48>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <ITM_SendChar+0x48>)
 80004c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004cc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <ITM_SendChar+0x4c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <ITM_SendChar+0x4c>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004da:	bf00      	nop
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f8      	beq.n	80004dc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000edfc 	.word	0xe000edfc
 8000504:	e0000e00 	.word	0xe0000e00

08000508 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00a      	b.n	8000530 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800051a:	f3af 8000 	nop.w
 800051e:	4601      	mov	r1, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	b2ca      	uxtb	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf0      	blt.n	800051a <_read+0x12>
	}

return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffab 	bl	80004b8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
	}
	return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_close>:

int _close(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
	return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a2:	605a      	str	r2, [r3, #4]
	return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <_isatty>:

int _isatty(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	return 1;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	return 0;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <_sbrk+0x5c>)
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <_sbrk+0x60>)
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <_sbrk+0x64>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <_sbrk+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d207      	bcs.n	8000624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000614:	f000 f846 	bl	80006a4 <__errno>
 8000618:	4603      	mov	r3, r0
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e009      	b.n	8000638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <_sbrk+0x64>)
 8000634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20018000 	.word	0x20018000
 8000644:	00000400 	.word	0x00000400
 8000648:	200000a4 	.word	0x200000a4
 800064c:	200000b8 	.word	0x200000b8

08000650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000654:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	; (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067e:	f000 f817 	bl	80006b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fda7 	bl	80001d4 <main>

08000686 <LoopForever>:

LoopForever:
    b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   r0, =_estack
 8000688:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000694:	0800123c 	.word	0x0800123c
  ldr r2, =_sbss
 8000698:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800069c:	200000b8 	.word	0x200000b8

080006a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC_IRQHandler>
	...

080006a4 <__errno>:
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <__errno+0x8>)
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000014 	.word	0x20000014

080006b0 <__libc_init_array>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	4d0d      	ldr	r5, [pc, #52]	; (80006e8 <__libc_init_array+0x38>)
 80006b4:	4c0d      	ldr	r4, [pc, #52]	; (80006ec <__libc_init_array+0x3c>)
 80006b6:	1b64      	subs	r4, r4, r5
 80006b8:	10a4      	asrs	r4, r4, #2
 80006ba:	2600      	movs	r6, #0
 80006bc:	42a6      	cmp	r6, r4
 80006be:	d109      	bne.n	80006d4 <__libc_init_array+0x24>
 80006c0:	4d0b      	ldr	r5, [pc, #44]	; (80006f0 <__libc_init_array+0x40>)
 80006c2:	4c0c      	ldr	r4, [pc, #48]	; (80006f4 <__libc_init_array+0x44>)
 80006c4:	f000 fd1e 	bl	8001104 <_init>
 80006c8:	1b64      	subs	r4, r4, r5
 80006ca:	10a4      	asrs	r4, r4, #2
 80006cc:	2600      	movs	r6, #0
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d105      	bne.n	80006de <__libc_init_array+0x2e>
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d8:	4798      	blx	r3
 80006da:	3601      	adds	r6, #1
 80006dc:	e7ee      	b.n	80006bc <__libc_init_array+0xc>
 80006de:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e2:	4798      	blx	r3
 80006e4:	3601      	adds	r6, #1
 80006e6:	e7f2      	b.n	80006ce <__libc_init_array+0x1e>
 80006e8:	08001234 	.word	0x08001234
 80006ec:	08001234 	.word	0x08001234
 80006f0:	08001234 	.word	0x08001234
 80006f4:	08001238 	.word	0x08001238

080006f8 <memset>:
 80006f8:	4402      	add	r2, r0
 80006fa:	4603      	mov	r3, r0
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d100      	bne.n	8000702 <memset+0xa>
 8000700:	4770      	bx	lr
 8000702:	f803 1b01 	strb.w	r1, [r3], #1
 8000706:	e7f9      	b.n	80006fc <memset+0x4>

08000708 <_puts_r>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	460e      	mov	r6, r1
 800070c:	4605      	mov	r5, r0
 800070e:	b118      	cbz	r0, 8000718 <_puts_r+0x10>
 8000710:	6983      	ldr	r3, [r0, #24]
 8000712:	b90b      	cbnz	r3, 8000718 <_puts_r+0x10>
 8000714:	f000 fa48 	bl	8000ba8 <__sinit>
 8000718:	69ab      	ldr	r3, [r5, #24]
 800071a:	68ac      	ldr	r4, [r5, #8]
 800071c:	b913      	cbnz	r3, 8000724 <_puts_r+0x1c>
 800071e:	4628      	mov	r0, r5
 8000720:	f000 fa42 	bl	8000ba8 <__sinit>
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <_puts_r+0xd0>)
 8000726:	429c      	cmp	r4, r3
 8000728:	d120      	bne.n	800076c <_puts_r+0x64>
 800072a:	686c      	ldr	r4, [r5, #4]
 800072c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800072e:	07db      	lsls	r3, r3, #31
 8000730:	d405      	bmi.n	800073e <_puts_r+0x36>
 8000732:	89a3      	ldrh	r3, [r4, #12]
 8000734:	0598      	lsls	r0, r3, #22
 8000736:	d402      	bmi.n	800073e <_puts_r+0x36>
 8000738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800073a:	f000 fad3 	bl	8000ce4 <__retarget_lock_acquire_recursive>
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	0719      	lsls	r1, r3, #28
 8000742:	d51d      	bpl.n	8000780 <_puts_r+0x78>
 8000744:	6923      	ldr	r3, [r4, #16]
 8000746:	b1db      	cbz	r3, 8000780 <_puts_r+0x78>
 8000748:	3e01      	subs	r6, #1
 800074a:	68a3      	ldr	r3, [r4, #8]
 800074c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000750:	3b01      	subs	r3, #1
 8000752:	60a3      	str	r3, [r4, #8]
 8000754:	bb39      	cbnz	r1, 80007a6 <_puts_r+0x9e>
 8000756:	2b00      	cmp	r3, #0
 8000758:	da38      	bge.n	80007cc <_puts_r+0xc4>
 800075a:	4622      	mov	r2, r4
 800075c:	210a      	movs	r1, #10
 800075e:	4628      	mov	r0, r5
 8000760:	f000 f848 	bl	80007f4 <__swbuf_r>
 8000764:	3001      	adds	r0, #1
 8000766:	d011      	beq.n	800078c <_puts_r+0x84>
 8000768:	250a      	movs	r5, #10
 800076a:	e011      	b.n	8000790 <_puts_r+0x88>
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <_puts_r+0xd4>)
 800076e:	429c      	cmp	r4, r3
 8000770:	d101      	bne.n	8000776 <_puts_r+0x6e>
 8000772:	68ac      	ldr	r4, [r5, #8]
 8000774:	e7da      	b.n	800072c <_puts_r+0x24>
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <_puts_r+0xd8>)
 8000778:	429c      	cmp	r4, r3
 800077a:	bf08      	it	eq
 800077c:	68ec      	ldreq	r4, [r5, #12]
 800077e:	e7d5      	b.n	800072c <_puts_r+0x24>
 8000780:	4621      	mov	r1, r4
 8000782:	4628      	mov	r0, r5
 8000784:	f000 f888 	bl	8000898 <__swsetup_r>
 8000788:	2800      	cmp	r0, #0
 800078a:	d0dd      	beq.n	8000748 <_puts_r+0x40>
 800078c:	f04f 35ff 	mov.w	r5, #4294967295
 8000790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000792:	07da      	lsls	r2, r3, #31
 8000794:	d405      	bmi.n	80007a2 <_puts_r+0x9a>
 8000796:	89a3      	ldrh	r3, [r4, #12]
 8000798:	059b      	lsls	r3, r3, #22
 800079a:	d402      	bmi.n	80007a2 <_puts_r+0x9a>
 800079c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800079e:	f000 faa2 	bl	8000ce6 <__retarget_lock_release_recursive>
 80007a2:	4628      	mov	r0, r5
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da04      	bge.n	80007b4 <_puts_r+0xac>
 80007aa:	69a2      	ldr	r2, [r4, #24]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dc06      	bgt.n	80007be <_puts_r+0xb6>
 80007b0:	290a      	cmp	r1, #10
 80007b2:	d004      	beq.n	80007be <_puts_r+0xb6>
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	6022      	str	r2, [r4, #0]
 80007ba:	7019      	strb	r1, [r3, #0]
 80007bc:	e7c5      	b.n	800074a <_puts_r+0x42>
 80007be:	4622      	mov	r2, r4
 80007c0:	4628      	mov	r0, r5
 80007c2:	f000 f817 	bl	80007f4 <__swbuf_r>
 80007c6:	3001      	adds	r0, #1
 80007c8:	d1bf      	bne.n	800074a <_puts_r+0x42>
 80007ca:	e7df      	b.n	800078c <_puts_r+0x84>
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	250a      	movs	r5, #10
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	6022      	str	r2, [r4, #0]
 80007d4:	701d      	strb	r5, [r3, #0]
 80007d6:	e7db      	b.n	8000790 <_puts_r+0x88>
 80007d8:	080011f4 	.word	0x080011f4
 80007dc:	08001214 	.word	0x08001214
 80007e0:	080011d4 	.word	0x080011d4

080007e4 <puts>:
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <puts+0xc>)
 80007e6:	4601      	mov	r1, r0
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	f7ff bf8d 	b.w	8000708 <_puts_r>
 80007ee:	bf00      	nop
 80007f0:	20000014 	.word	0x20000014

080007f4 <__swbuf_r>:
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	460e      	mov	r6, r1
 80007f8:	4614      	mov	r4, r2
 80007fa:	4605      	mov	r5, r0
 80007fc:	b118      	cbz	r0, 8000806 <__swbuf_r+0x12>
 80007fe:	6983      	ldr	r3, [r0, #24]
 8000800:	b90b      	cbnz	r3, 8000806 <__swbuf_r+0x12>
 8000802:	f000 f9d1 	bl	8000ba8 <__sinit>
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <__swbuf_r+0x98>)
 8000808:	429c      	cmp	r4, r3
 800080a:	d12b      	bne.n	8000864 <__swbuf_r+0x70>
 800080c:	686c      	ldr	r4, [r5, #4]
 800080e:	69a3      	ldr	r3, [r4, #24]
 8000810:	60a3      	str	r3, [r4, #8]
 8000812:	89a3      	ldrh	r3, [r4, #12]
 8000814:	071a      	lsls	r2, r3, #28
 8000816:	d52f      	bpl.n	8000878 <__swbuf_r+0x84>
 8000818:	6923      	ldr	r3, [r4, #16]
 800081a:	b36b      	cbz	r3, 8000878 <__swbuf_r+0x84>
 800081c:	6923      	ldr	r3, [r4, #16]
 800081e:	6820      	ldr	r0, [r4, #0]
 8000820:	1ac0      	subs	r0, r0, r3
 8000822:	6963      	ldr	r3, [r4, #20]
 8000824:	b2f6      	uxtb	r6, r6
 8000826:	4283      	cmp	r3, r0
 8000828:	4637      	mov	r7, r6
 800082a:	dc04      	bgt.n	8000836 <__swbuf_r+0x42>
 800082c:	4621      	mov	r1, r4
 800082e:	4628      	mov	r0, r5
 8000830:	f000 f926 	bl	8000a80 <_fflush_r>
 8000834:	bb30      	cbnz	r0, 8000884 <__swbuf_r+0x90>
 8000836:	68a3      	ldr	r3, [r4, #8]
 8000838:	3b01      	subs	r3, #1
 800083a:	60a3      	str	r3, [r4, #8]
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	6022      	str	r2, [r4, #0]
 8000842:	701e      	strb	r6, [r3, #0]
 8000844:	6963      	ldr	r3, [r4, #20]
 8000846:	3001      	adds	r0, #1
 8000848:	4283      	cmp	r3, r0
 800084a:	d004      	beq.n	8000856 <__swbuf_r+0x62>
 800084c:	89a3      	ldrh	r3, [r4, #12]
 800084e:	07db      	lsls	r3, r3, #31
 8000850:	d506      	bpl.n	8000860 <__swbuf_r+0x6c>
 8000852:	2e0a      	cmp	r6, #10
 8000854:	d104      	bne.n	8000860 <__swbuf_r+0x6c>
 8000856:	4621      	mov	r1, r4
 8000858:	4628      	mov	r0, r5
 800085a:	f000 f911 	bl	8000a80 <_fflush_r>
 800085e:	b988      	cbnz	r0, 8000884 <__swbuf_r+0x90>
 8000860:	4638      	mov	r0, r7
 8000862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <__swbuf_r+0x9c>)
 8000866:	429c      	cmp	r4, r3
 8000868:	d101      	bne.n	800086e <__swbuf_r+0x7a>
 800086a:	68ac      	ldr	r4, [r5, #8]
 800086c:	e7cf      	b.n	800080e <__swbuf_r+0x1a>
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <__swbuf_r+0xa0>)
 8000870:	429c      	cmp	r4, r3
 8000872:	bf08      	it	eq
 8000874:	68ec      	ldreq	r4, [r5, #12]
 8000876:	e7ca      	b.n	800080e <__swbuf_r+0x1a>
 8000878:	4621      	mov	r1, r4
 800087a:	4628      	mov	r0, r5
 800087c:	f000 f80c 	bl	8000898 <__swsetup_r>
 8000880:	2800      	cmp	r0, #0
 8000882:	d0cb      	beq.n	800081c <__swbuf_r+0x28>
 8000884:	f04f 37ff 	mov.w	r7, #4294967295
 8000888:	e7ea      	b.n	8000860 <__swbuf_r+0x6c>
 800088a:	bf00      	nop
 800088c:	080011f4 	.word	0x080011f4
 8000890:	08001214 	.word	0x08001214
 8000894:	080011d4 	.word	0x080011d4

08000898 <__swsetup_r>:
 8000898:	4b32      	ldr	r3, [pc, #200]	; (8000964 <__swsetup_r+0xcc>)
 800089a:	b570      	push	{r4, r5, r6, lr}
 800089c:	681d      	ldr	r5, [r3, #0]
 800089e:	4606      	mov	r6, r0
 80008a0:	460c      	mov	r4, r1
 80008a2:	b125      	cbz	r5, 80008ae <__swsetup_r+0x16>
 80008a4:	69ab      	ldr	r3, [r5, #24]
 80008a6:	b913      	cbnz	r3, 80008ae <__swsetup_r+0x16>
 80008a8:	4628      	mov	r0, r5
 80008aa:	f000 f97d 	bl	8000ba8 <__sinit>
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <__swsetup_r+0xd0>)
 80008b0:	429c      	cmp	r4, r3
 80008b2:	d10f      	bne.n	80008d4 <__swsetup_r+0x3c>
 80008b4:	686c      	ldr	r4, [r5, #4]
 80008b6:	89a3      	ldrh	r3, [r4, #12]
 80008b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008bc:	0719      	lsls	r1, r3, #28
 80008be:	d42c      	bmi.n	800091a <__swsetup_r+0x82>
 80008c0:	06dd      	lsls	r5, r3, #27
 80008c2:	d411      	bmi.n	80008e8 <__swsetup_r+0x50>
 80008c4:	2309      	movs	r3, #9
 80008c6:	6033      	str	r3, [r6, #0]
 80008c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008cc:	81a3      	strh	r3, [r4, #12]
 80008ce:	f04f 30ff 	mov.w	r0, #4294967295
 80008d2:	e03e      	b.n	8000952 <__swsetup_r+0xba>
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <__swsetup_r+0xd4>)
 80008d6:	429c      	cmp	r4, r3
 80008d8:	d101      	bne.n	80008de <__swsetup_r+0x46>
 80008da:	68ac      	ldr	r4, [r5, #8]
 80008dc:	e7eb      	b.n	80008b6 <__swsetup_r+0x1e>
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <__swsetup_r+0xd8>)
 80008e0:	429c      	cmp	r4, r3
 80008e2:	bf08      	it	eq
 80008e4:	68ec      	ldreq	r4, [r5, #12]
 80008e6:	e7e6      	b.n	80008b6 <__swsetup_r+0x1e>
 80008e8:	0758      	lsls	r0, r3, #29
 80008ea:	d512      	bpl.n	8000912 <__swsetup_r+0x7a>
 80008ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008ee:	b141      	cbz	r1, 8000902 <__swsetup_r+0x6a>
 80008f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d002      	beq.n	80008fe <__swsetup_r+0x66>
 80008f8:	4630      	mov	r0, r6
 80008fa:	f000 fa5b 	bl	8000db4 <_free_r>
 80008fe:	2300      	movs	r3, #0
 8000900:	6363      	str	r3, [r4, #52]	; 0x34
 8000902:	89a3      	ldrh	r3, [r4, #12]
 8000904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000908:	81a3      	strh	r3, [r4, #12]
 800090a:	2300      	movs	r3, #0
 800090c:	6063      	str	r3, [r4, #4]
 800090e:	6923      	ldr	r3, [r4, #16]
 8000910:	6023      	str	r3, [r4, #0]
 8000912:	89a3      	ldrh	r3, [r4, #12]
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	81a3      	strh	r3, [r4, #12]
 800091a:	6923      	ldr	r3, [r4, #16]
 800091c:	b94b      	cbnz	r3, 8000932 <__swsetup_r+0x9a>
 800091e:	89a3      	ldrh	r3, [r4, #12]
 8000920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000928:	d003      	beq.n	8000932 <__swsetup_r+0x9a>
 800092a:	4621      	mov	r1, r4
 800092c:	4630      	mov	r0, r6
 800092e:	f000 fa01 	bl	8000d34 <__smakebuf_r>
 8000932:	89a0      	ldrh	r0, [r4, #12]
 8000934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000938:	f010 0301 	ands.w	r3, r0, #1
 800093c:	d00a      	beq.n	8000954 <__swsetup_r+0xbc>
 800093e:	2300      	movs	r3, #0
 8000940:	60a3      	str	r3, [r4, #8]
 8000942:	6963      	ldr	r3, [r4, #20]
 8000944:	425b      	negs	r3, r3
 8000946:	61a3      	str	r3, [r4, #24]
 8000948:	6923      	ldr	r3, [r4, #16]
 800094a:	b943      	cbnz	r3, 800095e <__swsetup_r+0xc6>
 800094c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000950:	d1ba      	bne.n	80008c8 <__swsetup_r+0x30>
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	0781      	lsls	r1, r0, #30
 8000956:	bf58      	it	pl
 8000958:	6963      	ldrpl	r3, [r4, #20]
 800095a:	60a3      	str	r3, [r4, #8]
 800095c:	e7f4      	b.n	8000948 <__swsetup_r+0xb0>
 800095e:	2000      	movs	r0, #0
 8000960:	e7f7      	b.n	8000952 <__swsetup_r+0xba>
 8000962:	bf00      	nop
 8000964:	20000014 	.word	0x20000014
 8000968:	080011f4 	.word	0x080011f4
 800096c:	08001214 	.word	0x08001214
 8000970:	080011d4 	.word	0x080011d4

08000974 <__sflush_r>:
 8000974:	898a      	ldrh	r2, [r1, #12]
 8000976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800097a:	4605      	mov	r5, r0
 800097c:	0710      	lsls	r0, r2, #28
 800097e:	460c      	mov	r4, r1
 8000980:	d458      	bmi.n	8000a34 <__sflush_r+0xc0>
 8000982:	684b      	ldr	r3, [r1, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	dc05      	bgt.n	8000994 <__sflush_r+0x20>
 8000988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800098a:	2b00      	cmp	r3, #0
 800098c:	dc02      	bgt.n	8000994 <__sflush_r+0x20>
 800098e:	2000      	movs	r0, #0
 8000990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000996:	2e00      	cmp	r6, #0
 8000998:	d0f9      	beq.n	800098e <__sflush_r+0x1a>
 800099a:	2300      	movs	r3, #0
 800099c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009a0:	682f      	ldr	r7, [r5, #0]
 80009a2:	602b      	str	r3, [r5, #0]
 80009a4:	d032      	beq.n	8000a0c <__sflush_r+0x98>
 80009a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009a8:	89a3      	ldrh	r3, [r4, #12]
 80009aa:	075a      	lsls	r2, r3, #29
 80009ac:	d505      	bpl.n	80009ba <__sflush_r+0x46>
 80009ae:	6863      	ldr	r3, [r4, #4]
 80009b0:	1ac0      	subs	r0, r0, r3
 80009b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009b4:	b10b      	cbz	r3, 80009ba <__sflush_r+0x46>
 80009b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b8:	1ac0      	subs	r0, r0, r3
 80009ba:	2300      	movs	r3, #0
 80009bc:	4602      	mov	r2, r0
 80009be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009c0:	6a21      	ldr	r1, [r4, #32]
 80009c2:	4628      	mov	r0, r5
 80009c4:	47b0      	blx	r6
 80009c6:	1c43      	adds	r3, r0, #1
 80009c8:	89a3      	ldrh	r3, [r4, #12]
 80009ca:	d106      	bne.n	80009da <__sflush_r+0x66>
 80009cc:	6829      	ldr	r1, [r5, #0]
 80009ce:	291d      	cmp	r1, #29
 80009d0:	d82c      	bhi.n	8000a2c <__sflush_r+0xb8>
 80009d2:	4a2a      	ldr	r2, [pc, #168]	; (8000a7c <__sflush_r+0x108>)
 80009d4:	40ca      	lsrs	r2, r1
 80009d6:	07d6      	lsls	r6, r2, #31
 80009d8:	d528      	bpl.n	8000a2c <__sflush_r+0xb8>
 80009da:	2200      	movs	r2, #0
 80009dc:	6062      	str	r2, [r4, #4]
 80009de:	04d9      	lsls	r1, r3, #19
 80009e0:	6922      	ldr	r2, [r4, #16]
 80009e2:	6022      	str	r2, [r4, #0]
 80009e4:	d504      	bpl.n	80009f0 <__sflush_r+0x7c>
 80009e6:	1c42      	adds	r2, r0, #1
 80009e8:	d101      	bne.n	80009ee <__sflush_r+0x7a>
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	b903      	cbnz	r3, 80009f0 <__sflush_r+0x7c>
 80009ee:	6560      	str	r0, [r4, #84]	; 0x54
 80009f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009f2:	602f      	str	r7, [r5, #0]
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d0ca      	beq.n	800098e <__sflush_r+0x1a>
 80009f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d002      	beq.n	8000a06 <__sflush_r+0x92>
 8000a00:	4628      	mov	r0, r5
 8000a02:	f000 f9d7 	bl	8000db4 <_free_r>
 8000a06:	2000      	movs	r0, #0
 8000a08:	6360      	str	r0, [r4, #52]	; 0x34
 8000a0a:	e7c1      	b.n	8000990 <__sflush_r+0x1c>
 8000a0c:	6a21      	ldr	r1, [r4, #32]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	4628      	mov	r0, r5
 8000a12:	47b0      	blx	r6
 8000a14:	1c41      	adds	r1, r0, #1
 8000a16:	d1c7      	bne.n	80009a8 <__sflush_r+0x34>
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0c4      	beq.n	80009a8 <__sflush_r+0x34>
 8000a1e:	2b1d      	cmp	r3, #29
 8000a20:	d001      	beq.n	8000a26 <__sflush_r+0xb2>
 8000a22:	2b16      	cmp	r3, #22
 8000a24:	d101      	bne.n	8000a2a <__sflush_r+0xb6>
 8000a26:	602f      	str	r7, [r5, #0]
 8000a28:	e7b1      	b.n	800098e <__sflush_r+0x1a>
 8000a2a:	89a3      	ldrh	r3, [r4, #12]
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a30:	81a3      	strh	r3, [r4, #12]
 8000a32:	e7ad      	b.n	8000990 <__sflush_r+0x1c>
 8000a34:	690f      	ldr	r7, [r1, #16]
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d0a9      	beq.n	800098e <__sflush_r+0x1a>
 8000a3a:	0793      	lsls	r3, r2, #30
 8000a3c:	680e      	ldr	r6, [r1, #0]
 8000a3e:	bf08      	it	eq
 8000a40:	694b      	ldreq	r3, [r1, #20]
 8000a42:	600f      	str	r7, [r1, #0]
 8000a44:	bf18      	it	ne
 8000a46:	2300      	movne	r3, #0
 8000a48:	eba6 0807 	sub.w	r8, r6, r7
 8000a4c:	608b      	str	r3, [r1, #8]
 8000a4e:	f1b8 0f00 	cmp.w	r8, #0
 8000a52:	dd9c      	ble.n	800098e <__sflush_r+0x1a>
 8000a54:	6a21      	ldr	r1, [r4, #32]
 8000a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a58:	4643      	mov	r3, r8
 8000a5a:	463a      	mov	r2, r7
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	47b0      	blx	r6
 8000a60:	2800      	cmp	r0, #0
 8000a62:	dc06      	bgt.n	8000a72 <__sflush_r+0xfe>
 8000a64:	89a3      	ldrh	r3, [r4, #12]
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	81a3      	strh	r3, [r4, #12]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	e78e      	b.n	8000990 <__sflush_r+0x1c>
 8000a72:	4407      	add	r7, r0
 8000a74:	eba8 0800 	sub.w	r8, r8, r0
 8000a78:	e7e9      	b.n	8000a4e <__sflush_r+0xda>
 8000a7a:	bf00      	nop
 8000a7c:	20400001 	.word	0x20400001

08000a80 <_fflush_r>:
 8000a80:	b538      	push	{r3, r4, r5, lr}
 8000a82:	690b      	ldr	r3, [r1, #16]
 8000a84:	4605      	mov	r5, r0
 8000a86:	460c      	mov	r4, r1
 8000a88:	b913      	cbnz	r3, 8000a90 <_fflush_r+0x10>
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
 8000a90:	b118      	cbz	r0, 8000a9a <_fflush_r+0x1a>
 8000a92:	6983      	ldr	r3, [r0, #24]
 8000a94:	b90b      	cbnz	r3, 8000a9a <_fflush_r+0x1a>
 8000a96:	f000 f887 	bl	8000ba8 <__sinit>
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <_fflush_r+0x6c>)
 8000a9c:	429c      	cmp	r4, r3
 8000a9e:	d11b      	bne.n	8000ad8 <_fflush_r+0x58>
 8000aa0:	686c      	ldr	r4, [r5, #4]
 8000aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0ef      	beq.n	8000a8a <_fflush_r+0xa>
 8000aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000aac:	07d0      	lsls	r0, r2, #31
 8000aae:	d404      	bmi.n	8000aba <_fflush_r+0x3a>
 8000ab0:	0599      	lsls	r1, r3, #22
 8000ab2:	d402      	bmi.n	8000aba <_fflush_r+0x3a>
 8000ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ab6:	f000 f915 	bl	8000ce4 <__retarget_lock_acquire_recursive>
 8000aba:	4628      	mov	r0, r5
 8000abc:	4621      	mov	r1, r4
 8000abe:	f7ff ff59 	bl	8000974 <__sflush_r>
 8000ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ac4:	07da      	lsls	r2, r3, #31
 8000ac6:	4605      	mov	r5, r0
 8000ac8:	d4e0      	bmi.n	8000a8c <_fflush_r+0xc>
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	059b      	lsls	r3, r3, #22
 8000ace:	d4dd      	bmi.n	8000a8c <_fflush_r+0xc>
 8000ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ad2:	f000 f908 	bl	8000ce6 <__retarget_lock_release_recursive>
 8000ad6:	e7d9      	b.n	8000a8c <_fflush_r+0xc>
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <_fflush_r+0x70>)
 8000ada:	429c      	cmp	r4, r3
 8000adc:	d101      	bne.n	8000ae2 <_fflush_r+0x62>
 8000ade:	68ac      	ldr	r4, [r5, #8]
 8000ae0:	e7df      	b.n	8000aa2 <_fflush_r+0x22>
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <_fflush_r+0x74>)
 8000ae4:	429c      	cmp	r4, r3
 8000ae6:	bf08      	it	eq
 8000ae8:	68ec      	ldreq	r4, [r5, #12]
 8000aea:	e7da      	b.n	8000aa2 <_fflush_r+0x22>
 8000aec:	080011f4 	.word	0x080011f4
 8000af0:	08001214 	.word	0x08001214
 8000af4:	080011d4 	.word	0x080011d4

08000af8 <std>:
 8000af8:	2300      	movs	r3, #0
 8000afa:	b510      	push	{r4, lr}
 8000afc:	4604      	mov	r4, r0
 8000afe:	e9c0 3300 	strd	r3, r3, [r0]
 8000b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b06:	6083      	str	r3, [r0, #8]
 8000b08:	8181      	strh	r1, [r0, #12]
 8000b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8000b0c:	81c2      	strh	r2, [r0, #14]
 8000b0e:	6183      	str	r3, [r0, #24]
 8000b10:	4619      	mov	r1, r3
 8000b12:	2208      	movs	r2, #8
 8000b14:	305c      	adds	r0, #92	; 0x5c
 8000b16:	f7ff fdef 	bl	80006f8 <memset>
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <std+0x38>)
 8000b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <std+0x3c>)
 8000b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <std+0x40>)
 8000b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <std+0x44>)
 8000b28:	6224      	str	r4, [r4, #32]
 8000b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	bf00      	nop
 8000b30:	08000f95 	.word	0x08000f95
 8000b34:	08000fb7 	.word	0x08000fb7
 8000b38:	08000fef 	.word	0x08000fef
 8000b3c:	08001013 	.word	0x08001013

08000b40 <_cleanup_r>:
 8000b40:	4901      	ldr	r1, [pc, #4]	; (8000b48 <_cleanup_r+0x8>)
 8000b42:	f000 b8af 	b.w	8000ca4 <_fwalk_reent>
 8000b46:	bf00      	nop
 8000b48:	08000a81 	.word	0x08000a81

08000b4c <__sfmoreglue>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	2268      	movs	r2, #104	; 0x68
 8000b50:	1e4d      	subs	r5, r1, #1
 8000b52:	4355      	muls	r5, r2
 8000b54:	460e      	mov	r6, r1
 8000b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b5a:	f000 f997 	bl	8000e8c <_malloc_r>
 8000b5e:	4604      	mov	r4, r0
 8000b60:	b140      	cbz	r0, 8000b74 <__sfmoreglue+0x28>
 8000b62:	2100      	movs	r1, #0
 8000b64:	e9c0 1600 	strd	r1, r6, [r0]
 8000b68:	300c      	adds	r0, #12
 8000b6a:	60a0      	str	r0, [r4, #8]
 8000b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b70:	f7ff fdc2 	bl	80006f8 <memset>
 8000b74:	4620      	mov	r0, r4
 8000b76:	bd70      	pop	{r4, r5, r6, pc}

08000b78 <__sfp_lock_acquire>:
 8000b78:	4801      	ldr	r0, [pc, #4]	; (8000b80 <__sfp_lock_acquire+0x8>)
 8000b7a:	f000 b8b3 	b.w	8000ce4 <__retarget_lock_acquire_recursive>
 8000b7e:	bf00      	nop
 8000b80:	200000a9 	.word	0x200000a9

08000b84 <__sfp_lock_release>:
 8000b84:	4801      	ldr	r0, [pc, #4]	; (8000b8c <__sfp_lock_release+0x8>)
 8000b86:	f000 b8ae 	b.w	8000ce6 <__retarget_lock_release_recursive>
 8000b8a:	bf00      	nop
 8000b8c:	200000a9 	.word	0x200000a9

08000b90 <__sinit_lock_acquire>:
 8000b90:	4801      	ldr	r0, [pc, #4]	; (8000b98 <__sinit_lock_acquire+0x8>)
 8000b92:	f000 b8a7 	b.w	8000ce4 <__retarget_lock_acquire_recursive>
 8000b96:	bf00      	nop
 8000b98:	200000aa 	.word	0x200000aa

08000b9c <__sinit_lock_release>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	; (8000ba4 <__sinit_lock_release+0x8>)
 8000b9e:	f000 b8a2 	b.w	8000ce6 <__retarget_lock_release_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	200000aa 	.word	0x200000aa

08000ba8 <__sinit>:
 8000ba8:	b510      	push	{r4, lr}
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fff0 	bl	8000b90 <__sinit_lock_acquire>
 8000bb0:	69a3      	ldr	r3, [r4, #24]
 8000bb2:	b11b      	cbz	r3, 8000bbc <__sinit+0x14>
 8000bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bb8:	f7ff bff0 	b.w	8000b9c <__sinit_lock_release>
 8000bbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <__sinit+0x68>)
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <__sinit+0x6c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bca:	42a3      	cmp	r3, r4
 8000bcc:	bf04      	itt	eq
 8000bce:	2301      	moveq	r3, #1
 8000bd0:	61a3      	streq	r3, [r4, #24]
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f000 f820 	bl	8000c18 <__sfp>
 8000bd8:	6060      	str	r0, [r4, #4]
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f000 f81c 	bl	8000c18 <__sfp>
 8000be0:	60a0      	str	r0, [r4, #8]
 8000be2:	4620      	mov	r0, r4
 8000be4:	f000 f818 	bl	8000c18 <__sfp>
 8000be8:	2200      	movs	r2, #0
 8000bea:	60e0      	str	r0, [r4, #12]
 8000bec:	2104      	movs	r1, #4
 8000bee:	6860      	ldr	r0, [r4, #4]
 8000bf0:	f7ff ff82 	bl	8000af8 <std>
 8000bf4:	68a0      	ldr	r0, [r4, #8]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2109      	movs	r1, #9
 8000bfa:	f7ff ff7d 	bl	8000af8 <std>
 8000bfe:	68e0      	ldr	r0, [r4, #12]
 8000c00:	2202      	movs	r2, #2
 8000c02:	2112      	movs	r1, #18
 8000c04:	f7ff ff78 	bl	8000af8 <std>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61a3      	str	r3, [r4, #24]
 8000c0c:	e7d2      	b.n	8000bb4 <__sinit+0xc>
 8000c0e:	bf00      	nop
 8000c10:	080011d0 	.word	0x080011d0
 8000c14:	08000b41 	.word	0x08000b41

08000c18 <__sfp>:
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1a:	4607      	mov	r7, r0
 8000c1c:	f7ff ffac 	bl	8000b78 <__sfp_lock_acquire>
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <__sfp+0x84>)
 8000c22:	681e      	ldr	r6, [r3, #0]
 8000c24:	69b3      	ldr	r3, [r6, #24]
 8000c26:	b913      	cbnz	r3, 8000c2e <__sfp+0x16>
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f7ff ffbd 	bl	8000ba8 <__sinit>
 8000c2e:	3648      	adds	r6, #72	; 0x48
 8000c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	d503      	bpl.n	8000c40 <__sfp+0x28>
 8000c38:	6833      	ldr	r3, [r6, #0]
 8000c3a:	b30b      	cbz	r3, 8000c80 <__sfp+0x68>
 8000c3c:	6836      	ldr	r6, [r6, #0]
 8000c3e:	e7f7      	b.n	8000c30 <__sfp+0x18>
 8000c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c44:	b9d5      	cbnz	r5, 8000c7c <__sfp+0x64>
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <__sfp+0x88>)
 8000c48:	60e3      	str	r3, [r4, #12]
 8000c4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c4e:	6665      	str	r5, [r4, #100]	; 0x64
 8000c50:	f000 f847 	bl	8000ce2 <__retarget_lock_init_recursive>
 8000c54:	f7ff ff96 	bl	8000b84 <__sfp_lock_release>
 8000c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c60:	6025      	str	r5, [r4, #0]
 8000c62:	61a5      	str	r5, [r4, #24]
 8000c64:	2208      	movs	r2, #8
 8000c66:	4629      	mov	r1, r5
 8000c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c6c:	f7ff fd44 	bl	80006f8 <memset>
 8000c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c78:	4620      	mov	r0, r4
 8000c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7c:	3468      	adds	r4, #104	; 0x68
 8000c7e:	e7d9      	b.n	8000c34 <__sfp+0x1c>
 8000c80:	2104      	movs	r1, #4
 8000c82:	4638      	mov	r0, r7
 8000c84:	f7ff ff62 	bl	8000b4c <__sfmoreglue>
 8000c88:	4604      	mov	r4, r0
 8000c8a:	6030      	str	r0, [r6, #0]
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d1d5      	bne.n	8000c3c <__sfp+0x24>
 8000c90:	f7ff ff78 	bl	8000b84 <__sfp_lock_release>
 8000c94:	230c      	movs	r3, #12
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	e7ee      	b.n	8000c78 <__sfp+0x60>
 8000c9a:	bf00      	nop
 8000c9c:	080011d0 	.word	0x080011d0
 8000ca0:	ffff0001 	.word	0xffff0001

08000ca4 <_fwalk_reent>:
 8000ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ca8:	4606      	mov	r6, r0
 8000caa:	4688      	mov	r8, r1
 8000cac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000cb0:	2700      	movs	r7, #0
 8000cb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cb6:	f1b9 0901 	subs.w	r9, r9, #1
 8000cba:	d505      	bpl.n	8000cc8 <_fwalk_reent+0x24>
 8000cbc:	6824      	ldr	r4, [r4, #0]
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d1f7      	bne.n	8000cb2 <_fwalk_reent+0xe>
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cc8:	89ab      	ldrh	r3, [r5, #12]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d907      	bls.n	8000cde <_fwalk_reent+0x3a>
 8000cce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	d003      	beq.n	8000cde <_fwalk_reent+0x3a>
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	4630      	mov	r0, r6
 8000cda:	47c0      	blx	r8
 8000cdc:	4307      	orrs	r7, r0
 8000cde:	3568      	adds	r5, #104	; 0x68
 8000ce0:	e7e9      	b.n	8000cb6 <_fwalk_reent+0x12>

08000ce2 <__retarget_lock_init_recursive>:
 8000ce2:	4770      	bx	lr

08000ce4 <__retarget_lock_acquire_recursive>:
 8000ce4:	4770      	bx	lr

08000ce6 <__retarget_lock_release_recursive>:
 8000ce6:	4770      	bx	lr

08000ce8 <__swhatbuf_r>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	460e      	mov	r6, r1
 8000cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	b096      	sub	sp, #88	; 0x58
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	da08      	bge.n	8000d0c <__swhatbuf_r+0x24>
 8000cfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	602a      	str	r2, [r5, #0]
 8000d02:	061a      	lsls	r2, r3, #24
 8000d04:	d410      	bmi.n	8000d28 <__swhatbuf_r+0x40>
 8000d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0a:	e00e      	b.n	8000d2a <__swhatbuf_r+0x42>
 8000d0c:	466a      	mov	r2, sp
 8000d0e:	f000 f9a7 	bl	8001060 <_fstat_r>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	dbf1      	blt.n	8000cfa <__swhatbuf_r+0x12>
 8000d16:	9a01      	ldr	r2, [sp, #4]
 8000d18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d20:	425a      	negs	r2, r3
 8000d22:	415a      	adcs	r2, r3
 8000d24:	602a      	str	r2, [r5, #0]
 8000d26:	e7ee      	b.n	8000d06 <__swhatbuf_r+0x1e>
 8000d28:	2340      	movs	r3, #64	; 0x40
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	6023      	str	r3, [r4, #0]
 8000d2e:	b016      	add	sp, #88	; 0x58
 8000d30:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d34 <__smakebuf_r>:
 8000d34:	898b      	ldrh	r3, [r1, #12]
 8000d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d38:	079d      	lsls	r5, r3, #30
 8000d3a:	4606      	mov	r6, r0
 8000d3c:	460c      	mov	r4, r1
 8000d3e:	d507      	bpl.n	8000d50 <__smakebuf_r+0x1c>
 8000d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d44:	6023      	str	r3, [r4, #0]
 8000d46:	6123      	str	r3, [r4, #16]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	6163      	str	r3, [r4, #20]
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	ab01      	add	r3, sp, #4
 8000d52:	466a      	mov	r2, sp
 8000d54:	f7ff ffc8 	bl	8000ce8 <__swhatbuf_r>
 8000d58:	9900      	ldr	r1, [sp, #0]
 8000d5a:	4605      	mov	r5, r0
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	f000 f895 	bl	8000e8c <_malloc_r>
 8000d62:	b948      	cbnz	r0, 8000d78 <__smakebuf_r+0x44>
 8000d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d68:	059a      	lsls	r2, r3, #22
 8000d6a:	d4ef      	bmi.n	8000d4c <__smakebuf_r+0x18>
 8000d6c:	f023 0303 	bic.w	r3, r3, #3
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	81a3      	strh	r3, [r4, #12]
 8000d76:	e7e3      	b.n	8000d40 <__smakebuf_r+0xc>
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <__smakebuf_r+0x7c>)
 8000d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d7c:	89a3      	ldrh	r3, [r4, #12]
 8000d7e:	6020      	str	r0, [r4, #0]
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	81a3      	strh	r3, [r4, #12]
 8000d86:	9b00      	ldr	r3, [sp, #0]
 8000d88:	6163      	str	r3, [r4, #20]
 8000d8a:	9b01      	ldr	r3, [sp, #4]
 8000d8c:	6120      	str	r0, [r4, #16]
 8000d8e:	b15b      	cbz	r3, 8000da8 <__smakebuf_r+0x74>
 8000d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d94:	4630      	mov	r0, r6
 8000d96:	f000 f975 	bl	8001084 <_isatty_r>
 8000d9a:	b128      	cbz	r0, 8000da8 <__smakebuf_r+0x74>
 8000d9c:	89a3      	ldrh	r3, [r4, #12]
 8000d9e:	f023 0303 	bic.w	r3, r3, #3
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	81a3      	strh	r3, [r4, #12]
 8000da8:	89a0      	ldrh	r0, [r4, #12]
 8000daa:	4305      	orrs	r5, r0
 8000dac:	81a5      	strh	r5, [r4, #12]
 8000dae:	e7cd      	b.n	8000d4c <__smakebuf_r+0x18>
 8000db0:	08000b41 	.word	0x08000b41

08000db4 <_free_r>:
 8000db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d044      	beq.n	8000e44 <_free_r+0x90>
 8000dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dbe:	9001      	str	r0, [sp, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8000dc6:	bfb8      	it	lt
 8000dc8:	18e4      	addlt	r4, r4, r3
 8000dca:	f000 f97d 	bl	80010c8 <__malloc_lock>
 8000dce:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <_free_r+0x94>)
 8000dd0:	9801      	ldr	r0, [sp, #4]
 8000dd2:	6813      	ldr	r3, [r2, #0]
 8000dd4:	b933      	cbnz	r3, 8000de4 <_free_r+0x30>
 8000dd6:	6063      	str	r3, [r4, #4]
 8000dd8:	6014      	str	r4, [r2, #0]
 8000dda:	b003      	add	sp, #12
 8000ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000de0:	f000 b978 	b.w	80010d4 <__malloc_unlock>
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <_free_r+0x46>
 8000de8:	6825      	ldr	r5, [r4, #0]
 8000dea:	1961      	adds	r1, r4, r5
 8000dec:	428b      	cmp	r3, r1
 8000dee:	bf01      	itttt	eq
 8000df0:	6819      	ldreq	r1, [r3, #0]
 8000df2:	685b      	ldreq	r3, [r3, #4]
 8000df4:	1949      	addeq	r1, r1, r5
 8000df6:	6021      	streq	r1, [r4, #0]
 8000df8:	e7ed      	b.n	8000dd6 <_free_r+0x22>
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	b10b      	cbz	r3, 8000e04 <_free_r+0x50>
 8000e00:	42a3      	cmp	r3, r4
 8000e02:	d9fa      	bls.n	8000dfa <_free_r+0x46>
 8000e04:	6811      	ldr	r1, [r2, #0]
 8000e06:	1855      	adds	r5, r2, r1
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	d10b      	bne.n	8000e24 <_free_r+0x70>
 8000e0c:	6824      	ldr	r4, [r4, #0]
 8000e0e:	4421      	add	r1, r4
 8000e10:	1854      	adds	r4, r2, r1
 8000e12:	42a3      	cmp	r3, r4
 8000e14:	6011      	str	r1, [r2, #0]
 8000e16:	d1e0      	bne.n	8000dda <_free_r+0x26>
 8000e18:	681c      	ldr	r4, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	6053      	str	r3, [r2, #4]
 8000e1e:	4421      	add	r1, r4
 8000e20:	6011      	str	r1, [r2, #0]
 8000e22:	e7da      	b.n	8000dda <_free_r+0x26>
 8000e24:	d902      	bls.n	8000e2c <_free_r+0x78>
 8000e26:	230c      	movs	r3, #12
 8000e28:	6003      	str	r3, [r0, #0]
 8000e2a:	e7d6      	b.n	8000dda <_free_r+0x26>
 8000e2c:	6825      	ldr	r5, [r4, #0]
 8000e2e:	1961      	adds	r1, r4, r5
 8000e30:	428b      	cmp	r3, r1
 8000e32:	bf04      	itt	eq
 8000e34:	6819      	ldreq	r1, [r3, #0]
 8000e36:	685b      	ldreq	r3, [r3, #4]
 8000e38:	6063      	str	r3, [r4, #4]
 8000e3a:	bf04      	itt	eq
 8000e3c:	1949      	addeq	r1, r1, r5
 8000e3e:	6021      	streq	r1, [r4, #0]
 8000e40:	6054      	str	r4, [r2, #4]
 8000e42:	e7ca      	b.n	8000dda <_free_r+0x26>
 8000e44:	b003      	add	sp, #12
 8000e46:	bd30      	pop	{r4, r5, pc}
 8000e48:	200000ac 	.word	0x200000ac

08000e4c <sbrk_aligned>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4e0e      	ldr	r6, [pc, #56]	; (8000e88 <sbrk_aligned+0x3c>)
 8000e50:	460c      	mov	r4, r1
 8000e52:	6831      	ldr	r1, [r6, #0]
 8000e54:	4605      	mov	r5, r0
 8000e56:	b911      	cbnz	r1, 8000e5e <sbrk_aligned+0x12>
 8000e58:	f000 f88c 	bl	8000f74 <_sbrk_r>
 8000e5c:	6030      	str	r0, [r6, #0]
 8000e5e:	4621      	mov	r1, r4
 8000e60:	4628      	mov	r0, r5
 8000e62:	f000 f887 	bl	8000f74 <_sbrk_r>
 8000e66:	1c43      	adds	r3, r0, #1
 8000e68:	d00a      	beq.n	8000e80 <sbrk_aligned+0x34>
 8000e6a:	1cc4      	adds	r4, r0, #3
 8000e6c:	f024 0403 	bic.w	r4, r4, #3
 8000e70:	42a0      	cmp	r0, r4
 8000e72:	d007      	beq.n	8000e84 <sbrk_aligned+0x38>
 8000e74:	1a21      	subs	r1, r4, r0
 8000e76:	4628      	mov	r0, r5
 8000e78:	f000 f87c 	bl	8000f74 <_sbrk_r>
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d101      	bne.n	8000e84 <sbrk_aligned+0x38>
 8000e80:	f04f 34ff 	mov.w	r4, #4294967295
 8000e84:	4620      	mov	r0, r4
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	200000b0 	.word	0x200000b0

08000e8c <_malloc_r>:
 8000e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e90:	1ccd      	adds	r5, r1, #3
 8000e92:	f025 0503 	bic.w	r5, r5, #3
 8000e96:	3508      	adds	r5, #8
 8000e98:	2d0c      	cmp	r5, #12
 8000e9a:	bf38      	it	cc
 8000e9c:	250c      	movcc	r5, #12
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	4607      	mov	r7, r0
 8000ea2:	db01      	blt.n	8000ea8 <_malloc_r+0x1c>
 8000ea4:	42a9      	cmp	r1, r5
 8000ea6:	d905      	bls.n	8000eb4 <_malloc_r+0x28>
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	2600      	movs	r6, #0
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eb4:	4e2e      	ldr	r6, [pc, #184]	; (8000f70 <_malloc_r+0xe4>)
 8000eb6:	f000 f907 	bl	80010c8 <__malloc_lock>
 8000eba:	6833      	ldr	r3, [r6, #0]
 8000ebc:	461c      	mov	r4, r3
 8000ebe:	bb34      	cbnz	r4, 8000f0e <_malloc_r+0x82>
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	f7ff ffc2 	bl	8000e4c <sbrk_aligned>
 8000ec8:	1c43      	adds	r3, r0, #1
 8000eca:	4604      	mov	r4, r0
 8000ecc:	d14d      	bne.n	8000f6a <_malloc_r+0xde>
 8000ece:	6834      	ldr	r4, [r6, #0]
 8000ed0:	4626      	mov	r6, r4
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d140      	bne.n	8000f58 <_malloc_r+0xcc>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	4631      	mov	r1, r6
 8000eda:	4638      	mov	r0, r7
 8000edc:	eb04 0803 	add.w	r8, r4, r3
 8000ee0:	f000 f848 	bl	8000f74 <_sbrk_r>
 8000ee4:	4580      	cmp	r8, r0
 8000ee6:	d13a      	bne.n	8000f5e <_malloc_r+0xd2>
 8000ee8:	6821      	ldr	r1, [r4, #0]
 8000eea:	3503      	adds	r5, #3
 8000eec:	1a6d      	subs	r5, r5, r1
 8000eee:	f025 0503 	bic.w	r5, r5, #3
 8000ef2:	3508      	adds	r5, #8
 8000ef4:	2d0c      	cmp	r5, #12
 8000ef6:	bf38      	it	cc
 8000ef8:	250c      	movcc	r5, #12
 8000efa:	4629      	mov	r1, r5
 8000efc:	4638      	mov	r0, r7
 8000efe:	f7ff ffa5 	bl	8000e4c <sbrk_aligned>
 8000f02:	3001      	adds	r0, #1
 8000f04:	d02b      	beq.n	8000f5e <_malloc_r+0xd2>
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	442b      	add	r3, r5
 8000f0a:	6023      	str	r3, [r4, #0]
 8000f0c:	e00e      	b.n	8000f2c <_malloc_r+0xa0>
 8000f0e:	6822      	ldr	r2, [r4, #0]
 8000f10:	1b52      	subs	r2, r2, r5
 8000f12:	d41e      	bmi.n	8000f52 <_malloc_r+0xc6>
 8000f14:	2a0b      	cmp	r2, #11
 8000f16:	d916      	bls.n	8000f46 <_malloc_r+0xba>
 8000f18:	1961      	adds	r1, r4, r5
 8000f1a:	42a3      	cmp	r3, r4
 8000f1c:	6025      	str	r5, [r4, #0]
 8000f1e:	bf18      	it	ne
 8000f20:	6059      	strne	r1, [r3, #4]
 8000f22:	6863      	ldr	r3, [r4, #4]
 8000f24:	bf08      	it	eq
 8000f26:	6031      	streq	r1, [r6, #0]
 8000f28:	5162      	str	r2, [r4, r5]
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	f104 060b 	add.w	r6, r4, #11
 8000f32:	f000 f8cf 	bl	80010d4 <__malloc_unlock>
 8000f36:	f026 0607 	bic.w	r6, r6, #7
 8000f3a:	1d23      	adds	r3, r4, #4
 8000f3c:	1af2      	subs	r2, r6, r3
 8000f3e:	d0b6      	beq.n	8000eae <_malloc_r+0x22>
 8000f40:	1b9b      	subs	r3, r3, r6
 8000f42:	50a3      	str	r3, [r4, r2]
 8000f44:	e7b3      	b.n	8000eae <_malloc_r+0x22>
 8000f46:	6862      	ldr	r2, [r4, #4]
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	bf0c      	ite	eq
 8000f4c:	6032      	streq	r2, [r6, #0]
 8000f4e:	605a      	strne	r2, [r3, #4]
 8000f50:	e7ec      	b.n	8000f2c <_malloc_r+0xa0>
 8000f52:	4623      	mov	r3, r4
 8000f54:	6864      	ldr	r4, [r4, #4]
 8000f56:	e7b2      	b.n	8000ebe <_malloc_r+0x32>
 8000f58:	4634      	mov	r4, r6
 8000f5a:	6876      	ldr	r6, [r6, #4]
 8000f5c:	e7b9      	b.n	8000ed2 <_malloc_r+0x46>
 8000f5e:	230c      	movs	r3, #12
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4638      	mov	r0, r7
 8000f64:	f000 f8b6 	bl	80010d4 <__malloc_unlock>
 8000f68:	e7a1      	b.n	8000eae <_malloc_r+0x22>
 8000f6a:	6025      	str	r5, [r4, #0]
 8000f6c:	e7de      	b.n	8000f2c <_malloc_r+0xa0>
 8000f6e:	bf00      	nop
 8000f70:	200000ac 	.word	0x200000ac

08000f74 <_sbrk_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d06      	ldr	r5, [pc, #24]	; (8000f90 <_sbrk_r+0x1c>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	602b      	str	r3, [r5, #0]
 8000f80:	f7ff fb30 	bl	80005e4 <_sbrk>
 8000f84:	1c43      	adds	r3, r0, #1
 8000f86:	d102      	bne.n	8000f8e <_sbrk_r+0x1a>
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	b103      	cbz	r3, 8000f8e <_sbrk_r+0x1a>
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	200000b4 	.word	0x200000b4

08000f94 <__sread>:
 8000f94:	b510      	push	{r4, lr}
 8000f96:	460c      	mov	r4, r1
 8000f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f9c:	f000 f8a0 	bl	80010e0 <_read_r>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	bfab      	itete	ge
 8000fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8000fa8:	181b      	addge	r3, r3, r0
 8000faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fae:	bfac      	ite	ge
 8000fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fb2:	81a3      	strhlt	r3, [r4, #12]
 8000fb4:	bd10      	pop	{r4, pc}

08000fb6 <__swrite>:
 8000fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fba:	461f      	mov	r7, r3
 8000fbc:	898b      	ldrh	r3, [r1, #12]
 8000fbe:	05db      	lsls	r3, r3, #23
 8000fc0:	4605      	mov	r5, r0
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	4616      	mov	r6, r2
 8000fc6:	d505      	bpl.n	8000fd4 <__swrite+0x1e>
 8000fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f000 f868 	bl	80010a4 <_lseek_r>
 8000fd4:	89a3      	ldrh	r3, [r4, #12]
 8000fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fde:	81a3      	strh	r3, [r4, #12]
 8000fe0:	4632      	mov	r2, r6
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fea:	f000 b817 	b.w	800101c <_write_r>

08000fee <__sseek>:
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff6:	f000 f855 	bl	80010a4 <_lseek_r>
 8000ffa:	1c43      	adds	r3, r0, #1
 8000ffc:	89a3      	ldrh	r3, [r4, #12]
 8000ffe:	bf15      	itete	ne
 8001000:	6560      	strne	r0, [r4, #84]	; 0x54
 8001002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800100a:	81a3      	strheq	r3, [r4, #12]
 800100c:	bf18      	it	ne
 800100e:	81a3      	strhne	r3, [r4, #12]
 8001010:	bd10      	pop	{r4, pc}

08001012 <__sclose>:
 8001012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001016:	f000 b813 	b.w	8001040 <_close_r>
	...

0800101c <_write_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d07      	ldr	r5, [pc, #28]	; (800103c <_write_r+0x20>)
 8001020:	4604      	mov	r4, r0
 8001022:	4608      	mov	r0, r1
 8001024:	4611      	mov	r1, r2
 8001026:	2200      	movs	r2, #0
 8001028:	602a      	str	r2, [r5, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	f7ff fa89 	bl	8000542 <_write>
 8001030:	1c43      	adds	r3, r0, #1
 8001032:	d102      	bne.n	800103a <_write_r+0x1e>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	b103      	cbz	r3, 800103a <_write_r+0x1e>
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	200000b4 	.word	0x200000b4

08001040 <_close_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d06      	ldr	r5, [pc, #24]	; (800105c <_close_r+0x1c>)
 8001044:	2300      	movs	r3, #0
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	602b      	str	r3, [r5, #0]
 800104c:	f7ff fa95 	bl	800057a <_close>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d102      	bne.n	800105a <_close_r+0x1a>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	b103      	cbz	r3, 800105a <_close_r+0x1a>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	200000b4 	.word	0x200000b4

08001060 <_fstat_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4d07      	ldr	r5, [pc, #28]	; (8001080 <_fstat_r+0x20>)
 8001064:	2300      	movs	r3, #0
 8001066:	4604      	mov	r4, r0
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	602b      	str	r3, [r5, #0]
 800106e:	f7ff fa90 	bl	8000592 <_fstat>
 8001072:	1c43      	adds	r3, r0, #1
 8001074:	d102      	bne.n	800107c <_fstat_r+0x1c>
 8001076:	682b      	ldr	r3, [r5, #0]
 8001078:	b103      	cbz	r3, 800107c <_fstat_r+0x1c>
 800107a:	6023      	str	r3, [r4, #0]
 800107c:	bd38      	pop	{r3, r4, r5, pc}
 800107e:	bf00      	nop
 8001080:	200000b4 	.word	0x200000b4

08001084 <_isatty_r>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4d06      	ldr	r5, [pc, #24]	; (80010a0 <_isatty_r+0x1c>)
 8001088:	2300      	movs	r3, #0
 800108a:	4604      	mov	r4, r0
 800108c:	4608      	mov	r0, r1
 800108e:	602b      	str	r3, [r5, #0]
 8001090:	f7ff fa8f 	bl	80005b2 <_isatty>
 8001094:	1c43      	adds	r3, r0, #1
 8001096:	d102      	bne.n	800109e <_isatty_r+0x1a>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	b103      	cbz	r3, 800109e <_isatty_r+0x1a>
 800109c:	6023      	str	r3, [r4, #0]
 800109e:	bd38      	pop	{r3, r4, r5, pc}
 80010a0:	200000b4 	.word	0x200000b4

080010a4 <_lseek_r>:
 80010a4:	b538      	push	{r3, r4, r5, lr}
 80010a6:	4d07      	ldr	r5, [pc, #28]	; (80010c4 <_lseek_r+0x20>)
 80010a8:	4604      	mov	r4, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	2200      	movs	r2, #0
 80010b0:	602a      	str	r2, [r5, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	f7ff fa88 	bl	80005c8 <_lseek>
 80010b8:	1c43      	adds	r3, r0, #1
 80010ba:	d102      	bne.n	80010c2 <_lseek_r+0x1e>
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	b103      	cbz	r3, 80010c2 <_lseek_r+0x1e>
 80010c0:	6023      	str	r3, [r4, #0]
 80010c2:	bd38      	pop	{r3, r4, r5, pc}
 80010c4:	200000b4 	.word	0x200000b4

080010c8 <__malloc_lock>:
 80010c8:	4801      	ldr	r0, [pc, #4]	; (80010d0 <__malloc_lock+0x8>)
 80010ca:	f7ff be0b 	b.w	8000ce4 <__retarget_lock_acquire_recursive>
 80010ce:	bf00      	nop
 80010d0:	200000a8 	.word	0x200000a8

080010d4 <__malloc_unlock>:
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <__malloc_unlock+0x8>)
 80010d6:	f7ff be06 	b.w	8000ce6 <__retarget_lock_release_recursive>
 80010da:	bf00      	nop
 80010dc:	200000a8 	.word	0x200000a8

080010e0 <_read_r>:
 80010e0:	b538      	push	{r3, r4, r5, lr}
 80010e2:	4d07      	ldr	r5, [pc, #28]	; (8001100 <_read_r+0x20>)
 80010e4:	4604      	mov	r4, r0
 80010e6:	4608      	mov	r0, r1
 80010e8:	4611      	mov	r1, r2
 80010ea:	2200      	movs	r2, #0
 80010ec:	602a      	str	r2, [r5, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f7ff fa0a 	bl	8000508 <_read>
 80010f4:	1c43      	adds	r3, r0, #1
 80010f6:	d102      	bne.n	80010fe <_read_r+0x1e>
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	b103      	cbz	r3, 80010fe <_read_r+0x1e>
 80010fc:	6023      	str	r3, [r4, #0]
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
 8001100:	200000b4 	.word	0x200000b4

08001104 <_init>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	bf00      	nop
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr

08001110 <_fini>:
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001112:	bf00      	nop
 8001114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001116:	bc08      	pop	{r3}
 8001118:	469e      	mov	lr, r3
 800111a:	4770      	bx	lr
